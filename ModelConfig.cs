using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using LotusAPI;
using LotusAPI.MV;

using System.Drawing;
using System.ComponentModel;

namespace ATMC.App.SealerInspection
{
    public class ModelConfig : IJsonSerializable
    {
        [ReadOnly(true)]
        public List<PathDetectionInfo> Detectors { get; set; } = new List<PathDetectionInfo>();

        [ReadOnly(true)]
        public List<double> Timing { get; set; } = new List<double>();
        public Mat ModelImage = null;
        public string ModelName { get; set; } = "Unknown";
        public double OKThreshold { get; set; } = 0.0;
        public int ContinuousNGCount { get; set; } = 5;
        public string AsmDesc { get; set; } = "Unknown";
        public string RobotName { get; set; } = "Unknown";
        public int CarNumber { get; set; } = 0;
        [Browsable(false)]
        public int SkipCount { get; set; } = 0;

        //read from file generated by detector setting tool
        public void Read(Json node)
        {
            try
            {
                //read directory 
                Detectors.Clear();
                Timing.Clear();
                var model_dir = Registry.GetStringValue("ModelDir", "");
                if (model_dir == "")
                {
                    Logger.Error("No model directory, please set in registry");
                    return;
                }

                Logger.Debug("Loading detector configs...");
                Json jd = Json.ReadFromFile($"{model_dir}/{node["ModelName"].GetString("")}/detector.json");
                Detectors.AddRange(jd.ToArray<PathDetectionInfo>());
                Logger.Debug("Loading model images...");
                //load several image
                ModelImage = Mat.FromFile($"{model_dir}/{node["ModelName"].GetString("")}/image.jpg");

                Logger.Debug("Loading timing...");
                Timing.AddRange((double[])Json.ReadFromFile($"{model_dir}/{node["ModelName"].GetString("")}/timing.json"));

                SkipCount = Detectors.Count(x => x.Skip);

                OKThreshold = node["OKThreshold"].GetDouble(0);
                ContinuousNGCount = node["ContinuousNGCount"].GetInt(0);
                ModelName = node["ModelName"].GetString("Unknown");
                RobotName = node["RobotName"].GetString("Unknown");
                AsmDesc = node["AsmDesc"].GetString("Unknown");
                CarNumber = node["CarNumber"].GetInt(0);
            }
            catch (Exception ex) { Logger.Error(ex.Message); }
        }

        public void Write(Json node)
        {
            try
            {
                node["OKThreshold"] = OKThreshold;
                node["ModelName"] = ModelName;
                node["AsmDesc"] = AsmDesc;
                node["ContinuousNGCount"] = ContinuousNGCount;
                node["CarNumber"] = CarNumber;
                node["RobotName"] = RobotName;
            }catch(Exception ex) { Logger.Error(ex.Message); }
        }
    }
}
